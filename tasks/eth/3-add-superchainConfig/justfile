set dotenv-load

export rpcUrl := env_var('ETH_RPC_URL')
export signatures := env_var_or_default('SIGNATURES', '')
export bundle := "input"
export location := `pwd`

# Accounts
export councilSafe := env_var('COUNCIL_SAFE')
export foundationSafe := env_var('FOUNDATION_SAFE')
export ownerSafe := env_var('FOUNDATION_SAFE')
export randomPersonEoa := "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045"


simulate-council hdPath='0':
  #!/usr/bin/env bash
  cd ../../..
  echo "getting signer address..."
  if [ t"$SIMULATE_WITHOUT_LEDGER" == t1 ]
  then
    signer="0x07dC0893cAfbF810e3E72505041f2865726Fd073"
    echo "Simulating with first owner: ${signer}"
  else
    signer=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
    echo "Simulating with leger account: ${signer}"
  fi
  echo ""
  forge script NestedSignFromJson \
    --rpc-url ${rpcUrl} \
    --sender ${signer} \
    --sig "signJson(string,address)" \
    "${location}/${bundle}.json" \
    "${councilSafe}"

simulate-foundation hdPath='0':
  #!/usr/bin/env bash
  cd ../../..
  echo "getting signer address..."
  if [ t"$SIMULATE_WITHOUT_LEDGER" == t1 ]
  then
    signer="0x42d27eEA1AD6e22Af6284F609847CB3Cd56B9c64"
    echo "Simulating with first owner: ${signer}"
  else
    signer=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
    echo "Simulating with legder account: ${signer}"
  fi
  echo ""
  forge script NestedSignFromJson \
    --rpc-url ${rpcUrl} \
    --sender ${signer} \
    --sig "signJson(string,address)" \
    "${location}/${bundle}.json" \
    "${foundationSafe}"

sign-council hdPath='0':
  #!/usr/bin/env bash
  cd ../../..
  echo "getting signer address..."
  signer=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  echo "Signing with: ${signer}"
  echo ""
  $(git rev-parse --show-toplevel)/bin/eip712sign --ledger --hd-paths "m/44'/60'/{{hdPath}}'/0/0" -- \
  forge script NestedSignFromJson \
    --rpc-url ${rpcUrl} \
    --sig "signJson(string,address)" \
    "${location}/${bundle}.json" \
    "${councilSafe}"

sign-foundation hdPath='0':
  #!/usr/bin/env bash
  cd ../../..
  echo "getting signer address..."
  signer=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  echo "Signing with: ${signer}"
  echo ""
  $(git rev-parse --show-toplevel)/bin/eip712sign --ledger --hd-paths "m/44'/60'/{{hdPath}}'/0/0" -- \
  forge script NestedSignFromJson \
    --rpc-url ${rpcUrl} \
    --sig "signJson(string,address)" \
    "${location}/${bundle}.json" \
    "${foundationSafe}"

execute-council hdPath='0':
  #!/usr/bin/env bash
  cd ../../..
  sender=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  forge script NestedSignFromJson \
    --fork-url ${rpcUrl} \
    --ledger --hd-paths "m/44'/60'/{{hdPath}}'/0/0" \
    --broadcast \
    --sender ${sender} \
    --sig "approveJson(string,address,bytes)" \
    "${location}/${bundle}.json" \
    "${councilSafe}" \
    "${signatures}"

execute-foundation hdPath='0':
  #!/usr/bin/env bash
  cd ../../..
  sender=$(cast wallet address --ledger --mnemonic-derivation-path "m/44'/60'/{{hdPath}}'/0/0")
  forge script NestedSignFromJson \
    --fork-url ${rpcUrl} \
    --ledger --hd-paths "m/44'/60'/{{hdPath}}'/0/0" \
    --broadcast \
    --sender ${sender} \
    --sig "approveJson(string,address,bytes)" \
    "${location}/${bundle}.json" \
    "${foundationSafe}" \
    "${signatures}"

simulated-run hdPath='0':
  #!/usr/bin/env bash
  cd ../../..
  forge script NestedSignFromJson \
    --fork-url ${rpcUrl} \
    --sender ${randomPersonEoa} \
    --sig "runJson(string)" \
    ${location}/${bundle}.json
